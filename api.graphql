### This file was generated by Nexus Schema
### Do not make changes to this file directly

"""
Payload returned if login or signup is successful
"""
type AuthPayload {
  """
  The current JWT token. Use in Authentication header
  """
  token: String

  """
  The logged in user
  """
  user: User
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in RFC822: https://www.w3.org/Protocols/rfc822/.
"""
scalar EmailAddress @specifiedBy(url: "https://www.w3.org/Protocols/rfc822/")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject
  @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """
  Login to an existing account
  """
  login(email: String!, password: String!): AuthPayload

  """
  Signup for an account
  """
  signup(data: SignupInput!): AuthPayload
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

"""
A User Profile
"""
type Profile {
  createdAt: DateTime!
  firstName: String!

  """
  The first and last name of a user
  """
  fullName: String
  id: ID!
  lastName: String!
  updatedAt: DateTime!
  user: User!
}

type Query {
  """
  Returns the currently logged in user
  """
  me: User
}

enum Role {
  ADMIN
  USER
}

"""
Input required for a user to signup
"""
input SignupInput {
  email: String!
  password: String!
}

"""
Sort direction for filtering queries (ascending or descending)
"""
enum SortOrder {
  asc
  desc
}

"""
A way to filter string fields. Meant to pass to prisma where clause
"""
input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  notIn: [String!]
  startsWith: String
}

"""
A field whose value conforms to the standard URL format as specified in RFC3986: https://www.ietf.org/rfc/rfc3986.txt.
"""
scalar URL

"""
A User
"""
type User {
  createdAt: DateTime!
  email: String
  id: ID!
  profile: Profile
  roles: [Role!]!
  updatedAt: DateTime!
}

"""
Order users by a specific field
"""
input UserOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  updatedAt: SortOrder
}

"""
Input to find users based other fields
"""
input UserWhereInput {
  email: StringFilter
  id: Int
}

"""
Input to find users based on unique fields
"""
input UserWhereUniqueInput {
  email: String
  id: ID
}
